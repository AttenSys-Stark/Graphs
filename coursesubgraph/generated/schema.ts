// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class MyEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MyEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MyEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MyEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MyEntity | null {
    return changetype<MyEntity | null>(store.get_in_block("MyEntity", id));
  }

  static load(id: string): MyEntity | null {
    return changetype<MyEntity | null>(store.get("MyEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class CourseCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourseCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourseCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CourseCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CourseCreated | null {
    return changetype<CourseCreated | null>(
      store.get_in_block("CourseCreated", id),
    );
  }

  static load(id: string): CourseCreated | null {
    return changetype<CourseCreated | null>(store.get("CourseCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner_(): string {
    let value = this.get("owner_");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner_(value: string) {
    this.set("owner_", Value.fromString(value));
  }

  get base_uri(): Array<string> {
    let value = this.get("base_uri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set base_uri(value: Array<string>) {
    this.set("base_uri", Value.fromStringArray(value));
  }

  get name_(): Array<string> {
    let value = this.get("name_");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set name_(value: Array<string>) {
    this.set("name_", Value.fromStringArray(value));
  }

  get symbol(): Array<string> {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set symbol(value: Array<string>) {
    this.set("symbol", Value.fromStringArray(value));
  }

  get course_ipfs_uri(): Array<string> {
    let value = this.get("course_ipfs_uri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set course_ipfs_uri(value: Array<string>) {
    this.set("course_ipfs_uri", Value.fromStringArray(value));
  }
}

export class CourseReplaced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourseReplaced entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourseReplaced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CourseReplaced", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CourseReplaced | null {
    return changetype<CourseReplaced | null>(
      store.get_in_block("CourseReplaced", id),
    );
  }

  static load(id: string): CourseReplaced | null {
    return changetype<CourseReplaced | null>(store.get("CourseReplaced", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner_(): string {
    let value = this.get("owner_");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner_(value: string) {
    this.set("owner_", Value.fromString(value));
  }

  get new_course_uri(): Array<string> {
    let value = this.get("new_course_uri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set new_course_uri(value: Array<string>) {
    this.set("new_course_uri", Value.fromStringArray(value));
  }
}

export class CourseCertClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourseCertClaimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourseCertClaimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CourseCertClaimed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CourseCertClaimed | null {
    return changetype<CourseCertClaimed | null>(
      store.get_in_block("CourseCertClaimed", id),
    );
  }

  static load(id: string): CourseCertClaimed | null {
    return changetype<CourseCertClaimed | null>(
      store.get("CourseCertClaimed", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get candidate(): string {
    let value = this.get("candidate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set candidate(value: string) {
    this.set("candidate", Value.fromString(value));
  }
}

export class AdminTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdminTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AdminTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AdminTransferred", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AdminTransferred | null {
    return changetype<AdminTransferred | null>(
      store.get_in_block("AdminTransferred", id),
    );
  }

  static load(id: string): AdminTransferred | null {
    return changetype<AdminTransferred | null>(
      store.get("AdminTransferred", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get new_admin(): string {
    let value = this.get("new_admin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set new_admin(value: string) {
    this.set("new_admin", Value.fromString(value));
  }
}
