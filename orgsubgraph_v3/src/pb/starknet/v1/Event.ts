// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Event {
  static encode(message: Event, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.jsonDescription);

    writer.uint32(16);
    writer.uint64(message.blockNumber);

    writer.uint32(24);
    writer.int64(message.blockTimestamp);
  }

  static decode(reader: Reader, length: i32): Event {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Event();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.jsonDescription = reader.string();
          break;

        case 2:
          message.blockNumber = reader.uint64();
          break;

        case 3:
          message.blockTimestamp = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  jsonDescription: string;
  blockNumber: u64;
  blockTimestamp: i64;

  constructor(
    jsonDescription: string = "",
    blockNumber: u64 = 0,
    blockTimestamp: i64 = 0
  ) {
    this.jsonDescription = jsonDescription;
    this.blockNumber = blockNumber;
    this.blockTimestamp = blockTimestamp;
  }
}
